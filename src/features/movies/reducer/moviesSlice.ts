import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../../app/store';
import { fetchMovies } from '../api/moviesAPI';
import { moviesMock } from '../mocks/movies';
import { TableType } from '../table/TableType';

export interface MovieState {
  movies: TableType[];
  page: number;
  status: 'idle' | 'loading' | 'failed';
}

export const Limits = {
  min: 1,
  max: 10,
  input: {
    min: 0,
    max: 501
  }
};

const initialState: MovieState = {
  movies: moviesMock,
  page: 1,
  status: 'idle',
};

export const getMoviesAsync = createAsyncThunk(
  'movies/featchMovies',
  async (page: number) => {
    const response = await fetchMovies(page);
    return response.data.results;
  }
);

export const movieSlice = createSlice({
  name: 'movies',
  initialState,
  reducers: {
    next: (state) => {
      state.page = state.page < Limits.max ? state.page + 1 : state.page;
    },
    prev: (state) => {
      state.page = state.page > Limits.min ? state.page - 1 : state.page;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMoviesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getMoviesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.movies = action.payload;
      })
      .addCase(getMoviesAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { next, prev } = movieSlice.actions;

export const selectMovies = (state: RootState) => state.movies.movies;
export const selectPage = (state: RootState) => state.movies.page;

export default movieSlice.reducer;
